Completed:
1.4.4  A.k(f) -> filter-false
1.4.4  S.p(f) -> append f(S)? ("abc"pu -> "abcABC")
1.4.4  S.ê(n) -> n%2 < 1 ? palindromize : concat reverse
1.4.4  A.ê(n) -> n%2 < 1 ? palindromize : concat reverse
1.4.4  S.ê(s) -> is it a palindrome?
1.4.4  A.ê(s) -> is it a palindrome?
1.4.4  S.ø(s) -> contains
1.4.4  A.ø(x) -> contains
1.4.4  S.c(f) -> map each char-code through f
1.4.4  É -> `-1`
1.4.4  È -> `XYZ{X`

Planned:
1.4.5  S.o(f) -> filter  (no default function)
1.4.5  S.k(s) -> remove all chars in s from this (opposite of S.o(s))
1.4.5  S.k(f) -> filter-false  (no default function)
1.4.5  A.k(f) -> filter-false  (default function: identity)
1.4.5  X.?(f) -> run X through f  (default function: identity?)
1.4.5  S.?(n,s=" ") -> pad S to n chars with filler s
1.4.5  A.n(s/a) -> sort A with key s/a
1.4.5  S.n(s) -> convert to number ("baab"n"ab" -> 9)
1.4.5  N.s(s) -> convert to string (9s"ab" -> "baab")
1.4.5  ? -> `w `?
1.4.5  ? -> `c `?
1.4.5  Have each method control its own regex flags (modifying regexify() and various methods)

1.5.0  Clean up code

2.0.0  Use new encoding (https://github.com/ETHproductions/japt/issues/28)
2.0.0  Add custom string compressor (https://github.com/ETHproductions/japt/issues/29)
2.0.0  Introduce a true regex syntax (use slashes for regex and ÷ for division?)
2.0.0  Add single-class regexes with `\` (i.e. `Uf\w` == `Uf/\w/`)
2.0.0  Use ⁺ and ⁻ for unary plus and minus, make + and - always binary operators
2.0.0  Turn l into a property? (i.e. `Ul +1` -> `Ul+1`)
