Completed:
1.4.4  A.k(f) -> filter-false
1.4.4  S.p(f) -> append f(S)? ("abc"pu -> "abcABC")
1.4.4  S.ê(n) -> n%2 < 1 ? palindromize : concat reverse
1.4.4  A.ê(n) -> n%2 < 1 ? palindromize : concat reverse
1.4.4  S.ê(s) -> is it a palindrome?
1.4.4  A.ê(s) -> is it a palindrome?
1.4.4  S.ø(s) -> contains
1.4.4  A.ø(x) -> contains
1.4.4  S.c(f) -> map each char-code through f
1.4.4  É -> `-1`
1.4.4  È -> `XYZ{X`

1.4.5  S.o(f) -> filter  (no default function)
1.4.5  S.k(s) -> remove all chars in s from this (opposite of S.o(s))
1.4.5  S.k(f) -> filter-false  (no default function)
1.4.5  A.k(f) -> filter-false  (default function: identity)
1.4.5  S.n(s) -> convert to number ("baab"n"ab" -> 9)
1.4.5  N.s(s) -> convert to string (9s"ab" -> "baab")
1.4.5  S.n(a) -> convert to number ("7abab7"n["ab"7] -> 9)
1.4.5  N.s(a) -> convert to string (9s["ab"7] -> "7abab7")
1.4.5  A.ì(a) -> convert to number ([7'c'c7]ì['c7] -> 9)
1.4.5  N.ì(a) -> convert to array (9ì['c7] -> [7,"c","c",7])
1.4.5  A.ì(s) -> convert to number ([7'c'c7]ì"c7" -> 9)
1.4.5  N.ì(s) -> convert to array (9ì"c7" -> ["7","c","c","7"])
1.4.5  S.í(s) -> pair strings, like A.í(a)
1.4.5  Add %p (printable), %P, %q (printable + newline), and %Q character classes
1.4.5  N.a(n) -> absolute difference
1.4.5  N.j(n) -> coprime
1.4.5  N.y(n=2) -> GCD
1.4.5  F.g(n,a=[0,1]) -> Generate n'th item of sequence (repeatedly appending this(a.g(-1), i, a) to a)
1.4.5  S.y(f) -> Map columns
1.4.5  A.y(f) -> Map columns
1.4.5  N.s(f) -> Number(f(String(N)))
1.4.5  N.ì(f) -> Number(f(digits(N)))
1.4.5  Ê -> `l `
1.4.5  Ë -> `mDEF{D`
1.4.5  Ì -> `gJ `

2.0.0  Clean up code
2.0.0  Introduce a true regex syntax (use slashes for regex and ÷ for division?)
2.0.0  Add single-class regexes with `\` (i.e. `Uf\w` == `Uf/\w/`)
2.0.0  Have each method control its own regex flags (modifying regexify() and various methods)

Planned:
1.4.5  S.ù(n,s=" ") -> right-align S to n chars with filler s
1.4.5  S.ú() -> S.ù, but left-aligned
1.4.5  S.û() -> S.ù, but center-aligned
1.4.5  A.ù() -> right-align all items
1.4.5  A.ù(n) -> if A contains a string or array, right-align each to length n; else, right-align A to length n with 0's
1.4.5  A.ù(n,a=[0]) -> right-align A to n items with filler a
1.4.5  A.ù(n,x) -> right-align A to n items with filler [x]
1.4.5  A.ú() -> A.ù, but left-aligned
1.4.5  A.û() -> A.ù, but center-aligned
1.4.5  X.?(f) -> run X through f  (default function: output with newline?)
1.4.5  A.n(s) -> sort the items in A by their alphabetical order in s
1.4.5  A.n(a) -> sort A by the order the items appear in a?
1.4.5  A.?(f) -> all truthy indices
1.4.5  S.?(f) -> all truthy indices
1.4.5  S.?(s,n) -> insert s at every n'th position
1.4.5  A.?(x,n) -> insert x at every n'th position
1.4.5  S.?(s) -> interleave
1.4.5  A.?(a) -> interleave
1.4.5  S.u(x)? -> uppercase first character
1.4.5  S.v(x)? -> title case
1.4.5  S.w(n%3==1?) -> reverse and mirror ()[]{}<>\/
1.4.5  S.w(n%3==2?) -> mirror ()[]{}<>\/
1.4.5  S.?(s) -> transliterate (like S.d(s) but makes all replacements at once)
1.4.5  ? -> `w `?
1.4.5  ? -> `c `?
1.4.5  ? -> `y `?
1.4.5  A.?(s) -> keys/indices (like Jelly's `J`)
1.4.5  A.?() -> fill range ([1,5,3,3,4] -> [1,2,3,4,5,4,3,3,4])
1.4.5  A.?(f) -> minimum
1.4.5  A.?(f) -> maximum
1.4.5  Auto-finish arrays []
1.4.5  Auto-start functions? {}
1.4.5  Auto-finish/fill a?b:c
1.4.5  S.?() -> All substrings
1.4.5  A.?() -> All subslices

2.0.0  Outsource all output functions (so the client controls what happens with the output, rather than Japt itself)
2.0.0  Command-line-ify
2.0.0  Use new encoding (https://github.com/ETHproductions/japt/issues/28)
2.0.0  Add custom string compressor (https://github.com/ETHproductions/japt/issues/29)
2.0.0  Add characters that represent `U`, `X`, and `Z` in strings
2.0.0  Use ⁺ and ⁻ for unary plus and minus, ₊ and ₋ for increment and decrement, make + and - always binary operators
2.0.0  Turn l into a property? (i.e. `Ul +1` -> `Ul+1`)
2.0.0  Add constants that return the inputs
2.0.0  Add function that takes next byte and uses it to apply reverse and/or palindromize with options
2.0.0  Regex interpolation (like {} in strings)
2.0.0  Use non-ASCII chars for strings and regexes? (“” for strings, ‹› for regexes?)
2.0.0  Make mini-regexes take as many chars as is reasonable (i.e. \d+ -> /\d+/g, \d^m -> /^\d/gm)
